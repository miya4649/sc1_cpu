diff -Naur sc1_cpu/asm/Program.java sc1_cpu_ice/asm/Program.java
--- sc1_cpu/asm/Program.java	2016-12-22 21:32:14.000000000 +0900
+++ sc1_cpu_ice/asm/Program.java	2016-12-22 21:32:14.000000000 +0900
@@ -54,6 +54,8 @@
     as_bc(addr_rel(L_0)); // if (r1 != 0) goto L_0
     as_nop(0,0,0,0,0,0,0,0,0);
     as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
     // x = 16; y = 0; z = 8;
     // for (i = 0; i < 8; i++) {mem[x] = mem[y] + mem[z]; x+=1;y+=1;z+=1;}
     as_mvi(8); // r0 = 8
@@ -69,6 +71,8 @@
 
     as_nop(10,8,11, 0,0,0, 1,1,1); // d_addr = r10; a_addr = r8; b_addr = r11
     as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
 
     label(L_2);
 
@@ -88,6 +92,8 @@
 
     as_nop(8,8,10, 0,0,0, 1,1,1); // d_addr = r8; a_addr = r8; b_addr = r10
     as_add(11,8,8, 0,0,0, 0,0,0); // r11 = r8 + r8 = 0
+    as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
 
     label(L_5);
 
@@ -99,6 +105,8 @@
     as_halt();
     as_nop(0,0,0,0,0,0,0,0,0);
     as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
   }
 
   private void example2()
@@ -119,6 +127,8 @@
     as_bc(addr_rel(L_0)); // if (r1 != 0) PC += -3
     as_nop(0,0,0,0,0,0,0,0,0);
     as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
   }
 
   private void example3()
@@ -144,6 +154,8 @@
     label(L_1);
     as_nop(8,8,8, 0,0,0, 1,1,1); // d_addr = r8; a_addr = r8; b_addr = r8
     as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
     label(L_2);
     as_add(9,10,8, 1,0,0, 1,0,0); // mem[d] = r10 + r8; d+=r9;
     as_add(10,10,9, 0,0,0, 0,0,0); // r10 = r10 + r9
@@ -158,8 +170,8 @@
     label(L_4);
 
     // loop(wait)
-    as_mvi(0x2d00); // loop - 1 (low)
-    as_mvih(0x131); // loop - 1 (high)
+    as_mvi(0x8d80); // loop - 1 (low)
+    as_mvih(0x5b); // loop - 1 (high)
     as_add(3,0,8, 0,0,0, 0,0,0); // r3 = loop count-1
     as_mvi(addr_abs(L_7) - addr_abs(L_5));
     as_add(4,0,8, 0,0,0, 0,0,0); // r4 = the offset of the end of the loop
@@ -171,6 +183,8 @@
 
     as_nop(0,0,0,0,0,0,0,0,0);
     as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
 
     label(L_6);
 
@@ -185,10 +199,14 @@
     as_bc(addr_rel(L_4)); // if r11 > r10 goto L_4
     as_nop(0,0,0,0,0,0,0,0,0);
     as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
     as_add(1,8,9, 0,0,0, 0,0,0); // r1 = r8 + r9
     as_bc(addr_rel(L_9)); // else goto L_9
     as_nop(0,0,0,0,0,0,0,0,0);
     as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
+    as_nop(0,0,0,0,0,0,0,0,0);
   }
 
   @Override
diff -Naur sc1_cpu/rom.v sc1_cpu_ice/rom.v
--- sc1_cpu/rom.v	2016-12-22 21:32:14.000000000 +0900
+++ sc1_cpu_ice/rom.v	2016-12-22 21:32:14.000000000 +0900
@@ -16,48 +16,48 @@
         8'h05: data_out <= 32'h28820040;
         8'h06: data_out <= 32'h0003fc03;
         8'h07: data_out <= 32'h0c020040;
-        8'h08: data_out <= 32'h00001003;
+        8'h08: data_out <= 32'h00001803;
         8'h09: data_out <= 32'h10020040;
         8'h0a: data_out <= 32'h03fffc03;
         8'h0b: data_out <= 32'h14020040;
         8'h0c: data_out <= 32'h0000000b;
         8'h0d: data_out <= 32'h20820381;
         8'h0e: data_out <= 32'h00000001;
-        8'h0f: data_out <= 32'h24a21240;
-        8'h10: data_out <= 32'h28a24040;
-        8'h11: data_out <= 32'h28820040;
-        8'h12: data_out <= 32'h00040003;
-        8'h13: data_out <= 32'h2c020040;
-        8'h14: data_out <= 32'h00b40003;
-        8'h15: data_out <= 32'h0004c404;
-        8'h16: data_out <= 32'h0c020040;
-        8'h17: data_out <= 32'h00000c03;
-        8'h18: data_out <= 32'h10020040;
-        8'h19: data_out <= 32'h00000003;
-        8'h1a: data_out <= 32'h14020040;
-        8'h1b: data_out <= 32'h0000000b;
-        8'h1c: data_out <= 32'h00000001;
-        8'h1d: data_out <= 32'h00000001;
+        8'h0f: data_out <= 32'h00000001;
+        8'h10: data_out <= 32'h00000001;
+        8'h11: data_out <= 32'h24a21240;
+        8'h12: data_out <= 32'h28a24040;
+        8'h13: data_out <= 32'h28820040;
+        8'h14: data_out <= 32'h00040003;
+        8'h15: data_out <= 32'h2c020040;
+        8'h16: data_out <= 32'h02360003;
+        8'h17: data_out <= 32'h00016c04;
+        8'h18: data_out <= 32'h0c020040;
+        8'h19: data_out <= 32'h00001403;
+        8'h1a: data_out <= 32'h10020040;
+        8'h1b: data_out <= 32'h00000003;
+        8'h1c: data_out <= 32'h14020040;
+        8'h1d: data_out <= 32'h0000000b;
         8'h1e: data_out <= 32'h00000001;
-        8'h1f: data_out <= 32'h20a20381;
-        8'h20: data_out <= 32'h0080090c;
-        8'h21: data_out <= 32'h28a24040;
-        8'h22: data_out <= 32'h00b28006;
-        8'h23: data_out <= 32'h03ffc408;
-        8'h24: data_out <= 32'h00000001;
-        8'h25: data_out <= 32'h00000001;
-        8'h26: data_out <= 32'h04824040;
-        8'h27: data_out <= 32'h03ffa808;
+        8'h1f: data_out <= 32'h00000001;
+        8'h20: data_out <= 32'h00000001;
+        8'h21: data_out <= 32'h00000001;
+        8'h22: data_out <= 32'h00000001;
+        8'h23: data_out <= 32'h20a20381;
+        8'h24: data_out <= 32'h0080090c;
+        8'h25: data_out <= 32'h28a24040;
+        8'h26: data_out <= 32'h00b28006;
+        8'h27: data_out <= 32'h03ffbc08;
         8'h28: data_out <= 32'h00000001;
         8'h29: data_out <= 32'h00000001;
-        8'h2a: data_out <= 32'h00000000;
-        8'h2b: data_out <= 32'h00000000;
-        8'h2c: data_out <= 32'h00000000;
-        8'h2d: data_out <= 32'h00000000;
-        8'h2e: data_out <= 32'h00000000;
-        8'h2f: data_out <= 32'h00000000;
-        8'h30: data_out <= 32'h00000000;
-        8'h31: data_out <= 32'h00000000;
+        8'h2a: data_out <= 32'h00000001;
+        8'h2b: data_out <= 32'h00000001;
+        8'h2c: data_out <= 32'h04824040;
+        8'h2d: data_out <= 32'h03ff9808;
+        8'h2e: data_out <= 32'h00000001;
+        8'h2f: data_out <= 32'h00000001;
+        8'h30: data_out <= 32'h00000001;
+        8'h31: data_out <= 32'h00000001;
         8'h32: data_out <= 32'h00000000;
         8'h33: data_out <= 32'h00000000;
         8'h34: data_out <= 32'h00000000;
diff -Naur sc1_cpu/sc1_cpu.v sc1_cpu_ice/sc1_cpu.v
--- sc1_cpu/sc1_cpu.v	2016-12-22 21:32:14.000000000 +0900
+++ sc1_cpu_ice/sc1_cpu.v	2016-12-22 21:32:14.000000000 +0900
@@ -74,19 +74,23 @@
   localparam ZERO = 1'd0;
   localparam FFFF = {WIDTH_D{1'b1}};
 
-  wire [WIDTH_I-1:0]        mem_i_o;
+  wire [WIDTH_I-1:0]        mem_i_o_sig;
+  reg [WIDTH_I-1:0]         mem_i_o;
   reg [DEPTH_I-1:0]         mem_i_addr_r;
   reg [DEPTH_I-1:0]         mem_i_addr_w;
   reg [WIDTH_I-1:0]         mem_i_i;
   reg                       mem_i_we;
 
-  wire [WIDTH_D-1:0]        mem_d_o_a;
-  wire [WIDTH_D-1:0]        mem_d_o_b;
+  wire [WIDTH_D-1:0]        mem_d_o_a_sig;
+  wire [WIDTH_D-1:0]        mem_d_o_b_sig;
+  reg [WIDTH_D-1:0]         mem_d_o_a;
+  reg [WIDTH_D-1:0]         mem_d_o_b;
   wire                      mem_d_we_sig;
   reg [WIDTH_D-1:0]         mem_d_i;
   reg [DEPTH_D-1:0]         mem_d_addr_w;
   reg [DEPTH_D-1:0]         mem_d_addr_w_d1;
   reg [DEPTH_D-1:0]         mem_d_addr_w_d2;
+  reg [DEPTH_D-1:0]         mem_d_addr_w_d3;
   reg [DEPTH_D-1:0]         mem_d_addr_r_a;
   reg [DEPTH_D-1:0]         mem_d_addr_r_b;
   reg                       mem_d_we;
@@ -94,6 +98,8 @@
   reg                       cpu_en;
   reg [DEPTH_I-1:0]         pc_d1;
   reg [DEPTH_I-1:0]         pc_d2;
+  reg [DEPTH_I-1:0]         pc_d3;
+  reg [DEPTH_I-1:0]         pc_d4;
   reg [10:0]                stage_init;
   reg [WIDTH_D-1:0]         loop_counter;
   reg [DEPTH_I-1:0]         loop_end;
@@ -110,6 +116,7 @@
   wire [DEPTH_REG-1:0]      reg_b_addr_s1;
 
   reg [WIDTH_I-1:0]         mem_i_o_d1;
+  reg [WIDTH_I-1:0]         mem_i_o_d2;
   wire [6:0]                op;
   wire                      is_type_normal;
   wire                      not_increment;
@@ -128,6 +135,10 @@
   // register file
   reg [WIDTH_REG-1:0]       reg_file [0:(1 << DEPTH_REG)-1];
 
+  // switch source
+  assign source_a = is_mem_a ? mem_d_o_a : reg_file[reg_a_addr];
+  assign source_b = is_mem_b ? mem_d_o_b : reg_file[reg_b_addr];
+
   // decode(stage1)
   assign is_mem_d_s1 = mem_i_o[9];
   assign is_mem_a_s1 = mem_i_o[8];
@@ -140,24 +151,20 @@
   assign reg_b_addr_s1 = mem_i_o[DEPTH_REG+14-1:14];
 
   // decode(stage2)
-  assign op = mem_i_o_d1[6:0];
-  assign is_type_normal = mem_i_o_d1[6];
-  assign is_mem_d = mem_i_o_d1[9];
-  assign is_mem_a = mem_i_o_d1[8];
-  assign is_mem_b = mem_i_o_d1[7];
-  assign reg_d_addr = mem_i_o_d1[DEPTH_REG+26-1:26];
-  assign reg_a_addr = mem_i_o_d1[DEPTH_REG+20-1:20];
-  assign reg_b_addr = mem_i_o_d1[DEPTH_REG+14-1:14];
-  assign im16 = mem_i_o_d1[25:10];
-  assign ims16 = mem_i_o_d1[25:10];
+  assign op = mem_i_o_d2[6:0];
+  assign is_type_normal = mem_i_o_d2[6];
+  assign is_mem_d = mem_i_o_d2[9];
+  assign is_mem_a = mem_i_o_d2[8];
+  assign is_mem_b = mem_i_o_d2[7];
+  assign reg_d_addr = mem_i_o_d2[DEPTH_REG+26-1:26];
+  assign reg_a_addr = mem_i_o_d2[DEPTH_REG+20-1:20];
+  assign reg_b_addr = mem_i_o_d2[DEPTH_REG+14-1:14];
+  assign im16 = mem_i_o_d2[25:10];
+  assign ims16 = mem_i_o_d2[25:10];
 
   // manual pc increment
   assign not_increment = ((op == I_HALT) || (op == I_BC) || (op == I_BL) || (op == I_BA)) ? 1'b1 : 1'b0;
 
-  // switch source
-  assign source_a = is_mem_a ? mem_d_o_a : reg_file[reg_a_addr];
-  assign source_b = is_mem_b ? mem_d_o_b : reg_file[reg_b_addr];
-
   // switch operation
   function [WIDTH_D-1:0] result
     (
@@ -186,6 +193,10 @@
 
   always @(posedge clk)
     begin
+      mem_i_o <= mem_i_o_sig;
+      mem_d_o_a <= mem_d_o_a_sig;
+      mem_d_o_b <= mem_d_o_b_sig;
+
       if (reset == TRUE)
         begin
           stage_init <= ZERO;
@@ -270,12 +281,16 @@
             end
 
           // delay
+          mem_i_o_d2 <= mem_i_o_d1;
           mem_i_o_d1 <= mem_i_o;
+          pc_d4 <= pc_d3;
+          pc_d3 <= pc_d2;
           pc_d2 <= pc_d1;
           pc_d1 <= mem_i_addr_r;
           mem_d_we <= mem_d_we_sig;
-          mem_d_addr_w_d1 <= mem_d_addr_w;
+          mem_d_addr_w_d3 <= mem_d_addr_w_d2;
           mem_d_addr_w_d2 <= mem_d_addr_w_d1;
+          mem_d_addr_w_d1 <= mem_d_addr_w;
 
           // loop counter
           if (loop_end == mem_i_addr_r)
@@ -325,7 +340,7 @@
               case (op)
                 I_HALT:
                   begin
-                    mem_i_addr_r <= pc_d2;
+                    mem_i_addr_r <= pc_d4;
                   end
                 I_NOP:
                   begin
@@ -396,13 +411,13 @@
                       end
                     else
                       begin
-                        mem_i_addr_r <= pc_d2 + ims16;
+                        mem_i_addr_r <= pc_d4 + ims16;
                       end
                   end
                 I_BL:
                   begin
-                    reg_file[SP_REG_LINK] <= pc_d2 + ONE;
-                    mem_i_addr_r <= pc_d2 + ims16;
+                    reg_file[SP_REG_LINK] <= pc_d4 + ONE;
+                    mem_i_addr_r <= pc_d4 + ims16;
                   end
                 I_BA:
                   begin
@@ -411,7 +426,7 @@
                 I_LOOP:
                   begin
                     loop_counter <= reg_file[SP_REG_LOOP_COUNTER];
-                    loop_end <= pc_d2 + reg_file[SP_REG_LOOP_END][DEPTH_I-1:0];
+                    loop_end <= pc_d4 + reg_file[SP_REG_LOOP_END][DEPTH_I-1:0];
                     loop_span <= reg_file[SP_REG_LOOP_SPAN][DEPTH_I-1:0];
                   end
                 I_OUT:
@@ -438,7 +453,7 @@
      .addr_w (mem_i_addr_w),
      .data_in (mem_i_i),
      .we (mem_i_we),
-     .data_out (mem_i_o)
+     .data_out (mem_i_o_sig)
      );
 
   rw_port_ram
@@ -450,10 +465,10 @@
     (
      .clk (clk),
      .addr_r (mem_d_addr_r_a),
-     .addr_w (mem_d_addr_w_d2),
+     .addr_w (mem_d_addr_w_d3),
      .data_in (mem_d_i),
      .we (mem_d_we),
-     .data_out (mem_d_o_a)
+     .data_out (mem_d_o_a_sig)
      );
 
   rw_port_ram
@@ -465,10 +480,10 @@
     (
      .clk (clk),
      .addr_r (mem_d_addr_r_b),
-     .addr_w (mem_d_addr_w_d2),
+     .addr_w (mem_d_addr_w_d3),
      .data_in (mem_d_i),
      .we (mem_d_we),
-     .data_out (mem_d_o_b)
+     .data_out (mem_d_o_b_sig)
      );
 
 endmodule
